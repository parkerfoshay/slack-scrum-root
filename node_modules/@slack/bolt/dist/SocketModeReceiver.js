"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/explicit-member-accessibility, @typescript-eslint/strict-boolean-expressions */
const socket_mode_1 = require("@slack/socket-mode");
const http_1 = require("http");
const logger_1 = require("@slack/logger");
const oauth_1 = require("@slack/oauth");
/**
 * Receives Events, Slash Commands, and Actions of a web socket connection
 */
class SocketModeReceiver {
    constructor({ appToken, logger = undefined, logLevel = logger_1.LogLevel.INFO, clientId = undefined, clientSecret = undefined, stateSecret = undefined, installationStore = undefined, scopes = undefined, installerOptions = {}, }) {
        this.installer = undefined;
        this.client = new socket_mode_1.SocketModeClient({
            appToken,
            logLevel,
            logger,
            clientOptions: installerOptions.clientOptions,
        });
        console.log('installerOptions', installerOptions);
        // const expressMiddleware: RequestHandler[] = [
        //   verifySignatureAndParseRawBody(logger, signingSecret),
        //   respondToSslCheck,
        //   respondToUrlVerification,
        //   this.requestHandler.bind(this),
        // ];
        if (typeof logger !== 'undefined') {
            this.logger = logger;
        }
        else {
            this.logger = new logger_1.ConsoleLogger();
            this.logger.setLevel(logLevel);
        }
        if (clientId !== undefined &&
            clientSecret !== undefined &&
            (stateSecret !== undefined || installerOptions.stateStore !== undefined)) {
            this.installer = new oauth_1.InstallProvider({
                clientId,
                clientSecret,
                stateSecret,
                installationStore,
                logLevel,
                logger,
                stateStore: installerOptions.stateStore,
                authVersion: installerOptions.authVersion,
                clientOptions: installerOptions.clientOptions,
                authorizationUrl: installerOptions.authorizationUrl,
            });
        }
        // Add OAuth routes to receiver
        if (this.installer !== undefined) {
            // use default or passed in redirect path
            const redirectUriPath = installerOptions.redirectUriPath === undefined ? '/slack/oauth_redirect' : installerOptions.redirectUriPath;
            // use default or passed in installPath
            const installPath = installerOptions.installPath === undefined ? '/slack/install' : installerOptions.installPath;
            const server = http_1.createServer(async (req, res) => {
                if (req.url !== undefined && req.url.startsWith(redirectUriPath)) {
                    console.log(installerOptions.callbackOptions);
                    // call installer.handleCallback to wrap up the install flow
                    await this.installer.handleCallback(req, res, installerOptions.callbackOptions);
                }
                else if (req.url !== undefined && req.url.startsWith(installPath)) {
                    try {
                        const url = await this.installer.generateInstallUrl({
                            metadata: installerOptions.metadata,
                            scopes: scopes,
                            userScopes: installerOptions.userScopes,
                        });
                        res.writeHead(200, {});
                        res.end(`<html><body><a href=${url}><img alt=""Add to Slack"" height="40" width="139"
                src="https://platform.slack-edge.com/img/add_to_slack.png"
                srcset="https://platform.slack-edge.com/img/add_to_slack.png 1x,
                https://platform.slack-edge.com/img/add_to_slack@2x.png 2x" /></a></body></html>`);
                    }
                    catch (err) {
                        throw new Error(err);
                    }
                }
                else {
                    this.logger.error(`Tried to reach ${req.url} which isn't a`);
                    // Return 404 because we don't support route
                    res.writeHead(404, {});
                    res.end(`route ${req.url} doesn't exist!`);
                }
            });
            const port = installerOptions.port === undefined ? 3000 : installerOptions.port;
            this.logger.debug(`listening on port ${port} for OAuth`);
            this.logger.debug(`Go to http://localhost:${port}${installPath} to initiate OAuth flow`);
            // use port 3000 by default
            server.listen(port);
        }
        this.client.on('slack_event', async ({ ack, body }) => {
            var _a;
            const event = {
                body,
                ack,
            };
            await ((_a = this.app) === null || _a === void 0 ? void 0 : _a.processEvent(event));
        });
    }
    init(app) {
        this.app = app;
    }
    start() {
        return new Promise((resolve, reject) => {
            try {
                // start socket mode client
                this.client.start();
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
    stop() {
        return new Promise((resolve, reject) => {
            try {
                this.client.disconnect();
                resolve();
            }
            catch (error) {
                reject(error);
            }
        });
    }
}
exports.default = SocketModeReceiver;
//# sourceMappingURL=SocketModeReceiver.js.map